{
  "openapi": "3.0.3",
  "info": {
    "version": "1.0.1",
    "title": "GooseTrack",
    "description": "Personal to-do list website"
  },
  "consumes": ["application/json", "multipart/form-data"],
  "produces": ["application/json"],
  "servers": [
    {
      "url": "https://goose-track-backend-i4mr.onrender.com"
    },
    {
      "url": "http://localhost:3001"
    }
  ],
  "tags": [
    {
      "name": "Auth",
      "description": "Authorization endpoints"
    },
    { "name": "Reviews", "description": "Reviews endpoints" },
    { "name": "Tasks", "description": "Tasks endpoints" }
  ],
  "paths": {
    "/api/auth/register": {
      "post": {
        "tags": ["Auth"],
        "summary": "User registration",
        "parameters": [],
        "requestBody": {
          "description": "Registration object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegistrationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistrationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "User with this email is already in the base",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/activate/:verificationToken": {
      "get": {
        "tags": ["Auth"],
        "summary": "User email verification",
        "parameters": [
          {
            "in": "path",
            "name": "verificationToken",
            "required": true,
            "type": "string",
            "description": "User's email verification code"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "404": {
            "description": "User is not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/activate": {
      "post": {
        "tags": ["Auth"],
        "summary": "User verification email resend",
        "parameters": [],
        "requestBody": {
          "description": "User email resend object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmailVerificationResendRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessMessageResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "User is not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/login": {
      "post": {
        "tags": ["Auth"],
        "summary": "User login",
        "parameters": [],
        "requestBody": {
          "description": "User login object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Access errors (authorization or email verification)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/logout": {
      "post": {
        "tags": ["Auth"],
        "summary": "User logout",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessMessageResponse"
                }
              }
            }
          },
          "401": {
            "description": "Access errors (authorization or token verification)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/refresh": {
      "get": {
        "tags": ["Auth"],
        "summary": "User info refresh",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefreshResponse"
                }
              }
            }
          },
          "401": {
            "description": "Access errors (authorization or email verification)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/user": {
      "patch": {
        "tags": ["Auth"],
        "summary": "User info update",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "User info changes object",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfoResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Access errors (authorization)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "User with this email is already in the base",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },

    "/api/reviews": {
      "get": {
        "tags": ["Reviews"],
        "summary": "Get all reviews of all users",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReviewsList"
                }
              }
            }
          },
          "404": {
            "description": "Reviews not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Reviews"],
        "summary": "Add review",
        "security": [{ "Bearer": [] }],
        "parameters": [],
        "requestBody": {
          "description": "Review's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddReview"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddReviewResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (invalid access token)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/reviews/my-review/{id}": {
      "get": {
        "tags": ["Reviews"],
        "summary": "Get current user's review",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string",
            "description": "User's id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReviewsList"
                }
              }
            }
          },
          "400": {
            "description": "No token provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReviewsList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (invalid access token)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReviewsList"
                }
              }
            }
          },
          "404": {
            "description": "Review not found / Invalid user / Invalid session",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Reviews"],
        "summary": "Edit review",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string",
            "description": "User's id"
          }
        ],
        "requestBody": {
          "description": "Review's changes object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReviewChangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchReviewsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body or id) / No token provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (invalid access token)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Review not foung / Invalid user / Invalid session ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Reviews"],
        "summary": "Delete review",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string",
            "description": "User's id"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation",
            "content": {}
          },
          "401": {
            "description": "Unauthorized (invalid access token)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Review not found / Invalid user / Invalid session",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },

    "/api/tasks": {
      "get": {
        "tags": ["Tasks"],
        "summary": "Get all tasks ",
        "security": [{ "Bearer": [] }],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TasksList"
                }
              }
            }
          },

          "401": {
            "description": "Unauthorized (invalid access token)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Tasks"],
        "summary": "Add task",
        "security": [{ "Bearer": [] }],
        "parameters": [],
        "requestBody": {
          "description": "Task's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Task"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (invalid access token)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/tasks/{id}": {
      "patch": {
        "tags": ["Tasks"],
        "summary": "Update task",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string",
            "description": "Task's id ('id' field in tasks object)",
            "example": "6438255d9ef48a24e5d81693"
          }
        ],

        "requestBody": {
          "description": "Task's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Task"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (invalid access token)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Tasks"],
        "summary": "Delete task",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string",
            "description": "Task's id ('id' field in tasks object)",
            "example": "6438255d9ef48a24e5d81693"
          }
        ],
        "responses": {
          "200": {
            "description": "Task deleted",
            "content": {}
          },
          "401": {
            "description": "Unauthorized (invalid access token)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/tasks/month/{:year-:month}": {
      "get": {
        "tags": ["Tasks"],
        "summary": "Get tasks by month ",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "in": "path",
            "name": ":year-:month",
            "required": true,
            "type": "string",
            "description": "Tasks for the month",
            "example": "2023-06"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TasksList"
                }
              }
            }
          },

          "401": {
            "description": "Unauthorized (invalid access token)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/tasks/day/{:year-:month-:day}": {
      "get": {
        "tags": ["Tasks"],
        "summary": "Get tasks by day ",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "in": "path",
            "name": ":year-:month-:day",
            "required": true,
            "type": "string",
            "description": "Tasks for the day",
            "example": "2023-06-07"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TasksList"
                }
              }
            }
          },

          "401": {
            "description": "Unauthorized (invalid access token)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/tasks/category/{id}": {
      "patch": {
        "tags": ["Tasks"],
        "summary": "Update task category",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string",
            "description": "Task's id ('id' field in tasks object)",
            "example": "6438255d9ef48a24e5d81693"
          }
        ],
        "requestBody": {
          "description": "Task category",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskCategory"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK  ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (invalid access token)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "RegistrationRequest": {
        "type": "object",
        "required": ["username", "email", "password"],
        "properties": {
          "username": {
            "type": "string",
            "description": "User's name",
            "maxLength": 16,
            "example": "John Dou"
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "pattern": "^[a-z0-9._%+-]+@[a-z0-9.-]+.[a-z]{2,4}$/",
            "format": "email"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "minLength": 6,
            "example": "qwerty123"
          }
        }
      },
      "LoginRequest": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "pattern": "^[a-z0-9._%+-]+@[a-z0-9.-]+.[a-z]{2,4}$/",
            "format": "email"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "minLength": 6,
            "example": "qwerty123"
          }
        }
      },
      "EmailVerificationResendRequest": {
        "type": "object",
        "required": ["email"],
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "pattern": "^[a-z0-9._%+-]+@[a-z0-9.-]+.[a-z]{2,4}$/",
            "format": "email"
          }
        }
      },
      "UserUpdateRequest": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "User's name",
            "maxLength": 16,
            "example": "John Dou"
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "pattern": "^[a-z0-9._%+-]+@[a-z0-9.-]+.[a-z]{2,4}$/",
            "format": "email"
          },
          "birthday": {
            "type": "string",
            "format": "date",
            "description": "User's birthday"
          },
          "phone": {
            "type": "string",
            "format": "tel",
            "description": "User's phone number",
            "example": "+380112233456"
          },
          "skype": {
            "type": "string",
            "description": "User's skype number",
            "example": "@example123"
          },
          "imgURL": {
            "type": "string",
            "format": "binary",
            "description": "User's avatar"
          }
        }
      },
      "RegistrationResponse": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "User's name",
            "example": "John Dou"
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
          "_id": {
            "type": "string",
            "description": "User's database id",
            "example": "64975ec51ef898762c594f14"
          }
        }
      },
      "LoginResponse": {
        "type": "object",
        "properties": {
          "user": {
            "type": "object",
            "properties": {
              "username": {
                "type": "string",
                "description": "User's name",
                "example": "John Dou"
              },
              "email": {
                "type": "string",
                "description": "User's email",
                "format": "email"
              },
              "_id": {
                "type": "string",
                "description": "User's database id",
                "example": "64975ec51ef898762c594f14"
              },
              "birthday": {
                "type": "string",
                "format": "date"
              },
              "phone": {
                "type": "string"
              },
              "skype": {
                "type": "string"
              }
            }
          },
          "accessToken": {
            "type": "string",
            "description": "Backend access token"
          }
        }
      },
      "RefreshResponse": {
        "type": "object",
        "properties": {
          "user": {
            "type": "object",
            "properties": {
              "username": {
                "type": "string",
                "description": "User's name",
                "example": "John Dou"
              },
              "email": {
                "type": "string",
                "description": "User's email",
                "format": "email"
              },
              "_id": {
                "type": "string",
                "description": "User's database id",
                "example": "64975ec51ef898762c594f14"
              },
              "birthday": {
                "type": "string",
                "format": "date"
              },
              "phone": {
                "type": "string"
              },
              "skype": {
                "type": "string"
              }
            }
          }
        }
      },
      "SuccessMessageResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Success notification",
            "example": "Verification email is sent"
          }
        }
      },
      "UserInfoResponse": {
        "type": "object",
        "properties": {
          "user": {
            "type": "object",
            "properties": {
              "username": {
                "type": "string",
                "description": "User's name",
                "maxLength": 16,
                "example": "John Dou"
              },
              "email": {
                "type": "string",
                "description": "User's email",
                "pattern": "^[a-z0-9._%+-]+@[a-z0-9.-]+.[a-z]{2,4}$/",
                "format": "email"
              },
              "birthday": {
                "type": "string",
                "format": "date",
                "description": "User's birthday"
              },
              "phone": {
                "type": "string",
                "format": "tel",
                "description": "User's phone number",
                "example": "+380112233456"
              },
              "skype": {
                "type": "string",
                "description": "User's skype number",
                "example": "@example123"
              },
              "imgURL": {
                "type": "string",
                "format": "uri",
                "description": "User's avatar",
                "example": "https://res.cloudinary.com/example/image"
              },
              "updatedEmail": {
                "type": "string",
                "description": "User's email",
                "pattern": "^[a-z0-9._%+-]+@[a-z0-9.-]+.[a-z]{2,4}$/",
                "format": "email"
              }
            }
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Error description",
            "example": "Here is an error description"
          }
        }
      },
      "ReviewsList": {
        "type": "array",
        "description": "Array of user's reviews",
        "items": {
          "type": "object",
          "required": ["comment", "rating"],
          "properties": {
            "comment": {
              "type": "string",
              "description": "User's comment ",
              "maxLength": 300,
              "example": "Good program"
            },
            "rating": {
              "type": "number",
              "description": "User's rating",
              "maxLength": 1,
              "example": 3
            }
          }
        }
      },
      "ReviewChangeRequest": {
        "type": "object",
        "properties": {
          "comment": {
            "type": "string",
            "description": "User's comment ",
            "maxLength": 300,
            "example": "Good program"
          },
          "rating": {
            "type": "number",
            "description": "User's rating",
            "maxLength": 1,
            "example": 3
          }
        },
        "minProperties": 1
      },
      "AddReview": {
        "type": "object",
        "required": ["comment", "rating"],
        "properties": {
          "comment": {
            "type": "string",
            "description": "comment user's",
            "maxLength": 300,
            "example": "Good program"
          },
          "rating": {
            "type": "number",
            "description": "User's rating",
            "maxLength": 1,
            "example": 3
          }
        }
      },
      "AddReviewResponse": {
        "type": "object",
        "required": ["comment", "rating"],
        "properties": {
          "comment": {
            "type": "string",
            "description": "comment user's",
            "maxLength": 300,
            "example": "Good program"
          },
          "rating": {
            "type": "number",
            "description": "User's rating",
            "maxLength": 1,
            "example": 3
          },
          "_id": {
            "type": "string",
            "description": "Review's id",
            "example": "64975ec51ef898762c594f14"
          }
        }
      },
      "PatchReviewsResponse": {
        "type": "object",
        "required": ["comment", "rating"],
        "properties": {
          "comment": {
            "type": "string",
            "description": "comment user's",
            "maxLength": 300,
            "example": "Good rogram and more..."
          },
          "rating": {
            "type": "number",
            "description": "User's rating",
            "maxLength": 1,
            "example": 4
          }
        }
      },
      "TasksList": {
        "type": "array",
        "description": "Array of user's tasks",
        "items": {
          "type": "object",
          "required": ["title", "priority", "start", "end", "date", "category"],
          "properties": {
            "_id": {
              "type": "string",
              "example": "642fdf8745bc73b2aecbae7b",
              "description": "Backend-generated unique identifier."
            },
            "title": {
              "type": "string",
              "description": "Title task",
              "maxLength": 250,
              "example": "Task1"
            },
            "priority": {
              "type": "string",
              "enum": ["low", "medium", "high"],
              "default": "low",
              "description": "Task priority"
            },
            "start": {
              "type": "string",
              "format": "time",
              "example": "07:30",
              "description": "Task start"
            },
            "end": {
              "type": "string",
              "format": "time",
              "example": "09:30",
              "description": "Task end"
            },
            "date": {
              "type": "string",
              "format": "date",
              "example": "2023-06-28",
              "description": "Time of task start"
            },
            "category": {
              "type": "string",
              "enum": ["To do", "In progress", "Done"],
              "default": "To do",
              "description": "Task category"
            },
            "owner": {
              "type": "string",
              "example": "642fdf8745bc73b2aecbae7b",
              "description": "Owner's unique identifier."
            },
            "createdAt": {
              "type": "string",
              "format": "date-time",
              "example": "2023-04-12T07:28:49.493Z",
              "description": "Backend-generated date and time of task creating"
            }
          }
        }
      },
      "Task": {
        "type": "object",
        "required": ["title", "priority", "start", "end", "date", "category"],
        "properties": {
          "title": {
            "type": "string",
            "description": "Title task",
            "maxLength": 250,
            "example": "Task1"
          },
          "priority": {
            "type": "string",
            "enum": ["low", "medium", "high"],
            "default": "Low",
            "description": "Task priority"
          },
          "start": {
            "type": "string",
            "format": "time",
            "example": "07:30",
            "description": "Task start"
          },
          "end": {
            "type": "string",
            "format": "time",
            "example": "09:30",
            "description": "Task end"
          },
          "date": {
            "type": "string",
            "format": "date",
            "example": "2023-06-28",
            "description": "Time of task start"
          },
          "category": {
            "type": "string",
            "enum": ["To do", "In progress", "Done"],
            "default": "To do",
            "description": "Task category"
          }
        }
      },
      "TaskResponse": {
        "type": "object",
        "required": ["title", "priority", "start", "end", "date", "category"],
        "properties": {
          "title": {
            "type": "string",
            "description": "Title task",
            "maxLength": 250,
            "example": "Task1"
          },
          "priority": {
            "type": "string",
            "enum": ["low", "medium", "high"],
            "default": "low",
            "description": "Task priority"
          },
          "start": {
            "type": "string",
            "format": "time",
            "example": "07:30",
            "description": "Task start"
          },
          "end": {
            "type": "string",
            "format": "time",
            "example": "09:30",
            "description": "Task end"
          },
          "date": {
            "type": "string",
            "format": "date",
            "example": "2023-06-28",
            "description": "Time of task start"
          },
          "category": {
            "type": "string",
            "enum": ["To do", "In progress", "Done"],
            "default": "To do",
            "description": "Task category"
          },
          "_id": {
            "type": "string",
            "description": "Task id",
            "example": "64975ec51ef898762c594f14"
          },
          "owner": {
            "type": "string",
            "example": "642fdf8745bc73b2aecbae7b",
            "description": "Owner's unique identifier."
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2023-04-12T07:28:49.493Z",
            "description": "Backend-generated date and time of task creating"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2023-04-12T07:28:49.493Z",
            "description": "Backend-generated date and time of task updating"
          }
        }
      },
      "TaskCategory": {
        "type": "object",
        "required": ["category"],
        "properties": {
          "category": {
            "type": "string",
            "enum": ["To do", "In progress", "Done"],
            "default": "To do",
            "description": "Task category"
          }
        }
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "scheme": "bearer",
        "BearerFormat": "JWT"
      }
    }
  }
}
