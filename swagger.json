{
  "openapi": "3.0.3",
  "info": {
    "version": "1.0.1",
    "title": "GooseTrack",
    "description": "Personal to-do list website"
  },
  "consumes": ["application/json"],
  "produces": ["application/json"],
  "servers": [
    {
      "url": "https://goose-track-backend-i4mr.onrender.com"
    },
    {
      "url": "http://localhost:3001"
    }
  ],
  "tags": [
    {
      "name": "Auth",
      "description": "Authorization endpoints"
    },
    { "name": "Reviews", "description": "Reviews endpoints" }
  ],
  "paths": {
    "/api/auth/register": {
      "post": {
        "tags": ["Auth"],
        "summary": "User registration",
        "parameters": [],
        "requestBody": {
          "description": "Registration object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegistrationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistrationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "User with this email is already in the base",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/activate/:verificationToken": {
      "get": {
        "tags": ["Auth"],
        "summary": "User email verification",
        "parameters": [
          {
            "in": "path",
            "name": "verificationToken",
            "required": true,
            "type": "string",
            "description": "User's email verification code"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "404": {
            "description": "User is not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/activate": {
      "post": {
        "tags": ["Auth"],
        "summary": "User verification email resend",
        "parameters": [],
        "requestBody": {
          "description": "User email resend object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmailVerificationResendRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessMessageResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "User is not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/login": {
      "post": {
        "tags": ["Auth"],
        "summary": "User login",
        "parameters": [],
        "requestBody": {
          "description": "User login object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Access errors (authorization or email verification)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/logout": {
      "post": {
        "tags": ["Auth"],
        "summary": "User logout",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessMessageResponse"
                }
              }
            }
          },
          "401": {
            "description": "Access errors (authorization or token verification)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/refresh": {
      "get": {
        "tags": ["Auth"],
        "summary": "User info refresh",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefreshResponse"
                }
              }
            }
          },
          "401": {
            "description": "Access errors (authorization or email verification)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },

    "/api/reviews": {
      "get": {
        "tags": ["Reviews"],
        "summary": "Get all reviews users",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReviewsList"
                }
              }
            }
          },
          "404": {
            "description": "Reviews not foung",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/reviews/my-review": {
      "post": {
        "tags": ["Reviews"],
        "summary": "Add review",
        "security": [{ "Bearer": [] }],
        "parameters": [],
        "requestBody": {
          "description": "Review's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddReview"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddReviewResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (invalid access token)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Reviews"],
        "summary": "Get all reviews for current user",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string",
            "description": "Review's id ('id' field in review's object)"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReviewsList"
                }
              }
            }
          },
          "400": {
            "description": "No token provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReviewsList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (invalid access token)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReviewsList"
                }
              }
            }
          },
          "404": {
            "description": "Review not foung / Invalid user / Invalid session",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Reviews"],
        "summary": "Edit review",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string",
            "description": "Review's id ('id' field in review's object)"
          }
        ],
        "requestBody": {
          "description": "Review's object. At least one field is required",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReviewsList"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchReviewsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body or id) / No token provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (invalid access token)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Review not foung / Invalid user / Invalid session ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Reviews"],
        "summary": "Delete review",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string",
            "description": "Review's id ('id' field in review's object)"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation",
            "content": {}
          },
          "401": {
            "description": "Unauthorized (invalid access token)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Review not foung / Invalid user / Invalid session",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "RegistrationRequest": {
        "type": "object",
        "required": ["username", "email", "password"],
        "properties": {
          "username": {
            "type": "string",
            "description": "User's name",
            "maxLength": 16,
            "example": "John Dou"
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "pattern": "^[a-z0-9._%+-]+@[a-z0-9.-]+.[a-z]{2,4}$/",
            "format": "email"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "minLength": 6,
            "example": "qwerty123"
          }
        }
      },
      "LoginRequest": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "pattern": "^[a-z0-9._%+-]+@[a-z0-9.-]+.[a-z]{2,4}$/",
            "format": "email"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "minLength": 6,
            "example": "qwerty123"
          }
        }
      },
      "EmailVerificationResendRequest": {
        "type": "object",
        "required": ["email"],
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "pattern": "^[a-z0-9._%+-]+@[a-z0-9.-]+.[a-z]{2,4}$/",
            "format": "email"
          }
        }
      },
      "RegistrationResponse": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "User's name",
            "example": "John Dou"
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
          "_id": {
            "type": "string",
            "description": "User's database id",
            "example": "64975ec51ef898762c594f14"
          }
        }
      },
      "LoginResponse": {
        "type": "object",
        "properties": {
          "user": {
            "type": "object",
            "properties": {
              "username": {
                "type": "string",
                "description": "User's name",
                "example": "John Dou"
              },
              "email": {
                "type": "string",
                "description": "User's email",
                "format": "email"
              },
              "_id": {
                "type": "string",
                "description": "User's database id",
                "example": "64975ec51ef898762c594f14"
              },
              "birthday": {
                "type": "string",
                "format": "date"
              },
              "phone": {
                "type": "string"
              },
              "skype": {
                "type": "string"
              }
            }
          },
          "accessToken": {
            "type": "string",
            "description": "Backend access token"
          }
        }
      },
      "RefreshResponse": {
        "type": "object",
        "properties": {
          "user": {
            "type": "object",
            "properties": {
              "username": {
                "type": "string",
                "description": "User's name",
                "example": "John Dou"
              },
              "email": {
                "type": "string",
                "description": "User's email",
                "format": "email"
              },
              "_id": {
                "type": "string",
                "description": "User's database id",
                "example": "64975ec51ef898762c594f14"
              },
              "birthday": {
                "type": "string",
                "format": "date"
              },
              "phone": {
                "type": "string"
              },
              "skype": {
                "type": "string"
              }
            }
          }
        }
      },
      "SuccessMessageResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Success notification",
            "example": "Verification email is sent"
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Error description",
            "example": "Here is an error description"
          }
        }
      },
      "ReviewsList": {
        "type": "object",
        "required": ["comment", "rating"],
        "properties": {
          "comment": {
            "type": "string",
            "description": "comment user's",
            "maxLength": 300,
            "example": "Good rogram"
          },
          "rating": {
            "type": "number",
            "description": "User's rating",
            "maxLength": 1,
            "example": 3
          }
        }
      },
      "AddReview": {
        "type": "object",
        "required": ["comment", "rating"],
        "properties": {
          "comment": {
            "type": "string",
            "description": "comment user's",
            "maxLength": 300,
            "example": "Good rogram"
          },
          "rating": {
            "type": "number",
            "description": "User's rating",
            "maxLength": 1,
            "example": 3
          }
        }
      },
      "AddReviewResponse": {
        "type": "object",
        "required": ["comment", "rating"],
        "properties": {
          "comment": {
            "type": "string",
            "description": "comment user's",
            "maxLength": 300,
            "example": "Good rogram"
          },
          "rating": {
            "type": "number",
            "description": "User's rating",
            "maxLength": 1,
            "example": 3
          },
          "_id": {
            "type": "string",
            "description": "Review's id",
            "example": "64975ec51ef898762c594f14"
          }
        }
      },
      "PatchReviewsResponse": {
        "type": "object",
        "required": ["comment", "rating"],
        "properties": {
          "comment": {
            "type": "string",
            "description": "comment user's",
            "maxLength": 300,
            "example": "Good rogram and more..."
          },
          "rating": {
            "type": "number",
            "description": "User's rating",
            "maxLength": 1,
            "example": 4
          }
        }
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "scheme": "bearer",
        "BearerFormat": "JWT"
      }
    }
  }
}
